



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `PerfumazonContext`
//     Provider:               `MySql.Data.MySqlClient`
//     Connection String:      `server=127.0.0.1;uid=rizwan;pwd=rizwan;database=Perfumazon;`
//     Schema:                 `Perfumazon`
//     Include Views:          `False`


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace Perfumazon.Model
{
	public partial class Perfumazon : Database
	{
		public Perfumazon() 
			: base("PerfumazonContext")
		{
			CommonConstruct();
		}

		public Perfumazon(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			Perfumazon GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static Perfumazon GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new Perfumazon();
        }

		[ThreadStatic] static Perfumazon _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static Perfumazon repo { get { return Perfumazon.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static T SingleOrDefaultById(object primaryKey) { return repo.SingleOrDefaultById<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T SingleById(object primaryKey) { return repo.SingleById<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
		}
	}
	

    
	[TableName("currency")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class currency : Perfumazon.Record<currency>  
    {
		[Column] public bool Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Code { get; set; }
	}
    
	[TableName("formula")]
	[PrimaryKey("ProductId,ItemId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class formula : Perfumazon.Record<formula>  
    {
		[Column] public uint ProductId { get; set; }
		[Column] public ushort ItemId { get; set; }
		[Column] public decimal Quantity { get; set; }
		[Column] public bool UOMId { get; set; }
	}
    
	[TableName("item")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class item : Perfumazon.Record<item>  
    {
		[Column] public ushort Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Description { get; set; }
		[Column] public bool CatId { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
		[Column] public DateTime? UpdateTime { get; set; }
	}
    
	[TableName("itemcategory")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class itemcategory : Perfumazon.Record<itemcategory>  
    {
		[Column] public bool Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Description { get; set; }
	}
    
	[TableName("itemprice")]
	[PrimaryKey("ItemId,Price,CurrencyId,UOMId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class itemprice : Perfumazon.Record<itemprice>  
    {
		[Column] public ushort ItemId { get; set; }
		[Column] public decimal Price { get; set; }
		[Column] public bool CurrencyId { get; set; }
		[Column] public bool UOMId { get; set; }
	}
    
	[TableName("product")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class product : Perfumazon.Record<product>  
    {
		[Column] public uint Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Description { get; set; }
		[Column] public bool CatId { get; set; }
		[Column] public uint CreatedBy { get; set; }
		[Column] public DateTime? CreationTime { get; set; }
		[Column] public DateTime? ModificationTime { get; set; }
	}
    
	[TableName("productcategory")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class productcategory : Perfumazon.Record<productcategory>  
    {
		[Column] public bool Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Description { get; set; }
	}
    
	[TableName("productprice")]
	[PrimaryKey("ProductId,Price,CurrencyId,UOMId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class productprice : Perfumazon.Record<productprice>  
    {
		[Column] public uint ProductId { get; set; }
		[Column] public decimal Price { get; set; }
		[Column] public bool CurrencyId { get; set; }
		[Column] public bool UOMId { get; set; }
	}
    
	[TableName("roles")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class role : Perfumazon.Record<role>  
    {
		[Column] public bool Id { get; set; }
		[Column] public string Role { get; set; }
	}
    
	[TableName("unitofmeasure")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class unitofmeasure : Perfumazon.Record<unitofmeasure>  
    {
		[Column] public bool Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Description { get; set; }
		[Column] public bool Internal { get; set; }
	}
    
	[TableName("userroles")]
	[PrimaryKey("UserId,RoleId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class userrole : Perfumazon.Record<userrole>  
    {
		[Column] public uint UserId { get; set; }
		[Column] public bool RoleId { get; set; }
	}
    
	[TableName("users")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class user : Perfumazon.Record<user>  
    {
		[Column] public uint Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public byte[] Password { get; set; }
	}
}



